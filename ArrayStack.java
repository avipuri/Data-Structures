import java.util.Arrays;import java.util.EmptyStackException;/**    A class of stacks whose entries are stored in an array.    @author Frank M. Carrano and Timothy M. Henry    @version 4.0*/public class ArrayStack<T> implements StackInterface<T> {	private T[] stack;    // Array of stack entries	private int topIndex; // Index of top entry   private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 50;	private static final int MAX_CAPACITY = 10000;     public ArrayStack()   {      this(DEFAULT_CAPACITY);   } // end default constructor      public ArrayStack(int initialCapacity)   {            // The cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] tempStack = (T[])new Object[initialCapacity];      stack = tempStack;		topIndex = -1;      initialized = true;   } // end constructor       // Throws an exception if this object is not initialized.   private void checkInitialization()   {      if (!initialized)      throw new SecurityException("ArrayBag object is not initialized " +                                  "properly.");   } // end checkInitialization   public void push(T newEntry)   {      ensureCapacity();      stack[topIndex + 1] = newEntry;      topIndex++;   } // end push   private void ensureCapacity()   {      if (topIndex >= stack.length - 1) // If array is full, double its size      {         int newLength = 2 * stack.length;//         checkCapacity(newLength);         stack = Arrays.copyOf(stack, newLength);      } // end if   } // end ensureCapacity         public T pop() throws EmptyStackException   {      checkInitialization();      if (isEmpty())         throw new EmptyStackException();      else      {         T top = stack[topIndex];         stack[topIndex] = null;         topIndex--;         return top;      } // end if   } // end pop   public T peek()   {      checkInitialization();      if (isEmpty())         throw new EmptyStackException();      else         return stack[topIndex];   } // end peek   public boolean isEmpty()   {      return topIndex == 0;   }   public void clear()   {      topIndex = -1;   }   public void displayStack ()   {      for (int stackPosn=0; stackPosn < topIndex; ++stackPosn)         {         System.out.println (stack [stackPosn]);         }   }   private class Node   {      private T    data; // Entry in stack      private Node next; // Link to next node            private Node(T dataPortion)      {         this(dataPortion, null);      } // end constructor            private Node(T dataPortion, Node linkPortion)      {         data = dataPortion;         next = linkPortion;      } // end constructor            private T getData()      {         return data;      } // end getData            private void setData(T newData)      {         data = newData;      } // end setData            private Node getNextNode()      {         return next;      } // end getNextNode            private void setNextNode(Node nextNode)      {         next = nextNode;      } // end setNextNode	} // end Node} // end ArrayStack